// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: reusehub/listing/v1/listing.proto

package listingv1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1 "github.com/vladimirRadojkovic/reusehub-api/genproto/reusehub/listing/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// ListingServiceName is the fully-qualified name of the ListingService service.
	ListingServiceName = "reusehub.listing.v1.ListingService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ListingServiceGetListingProcedure is the fully-qualified name of the ListingService's GetListing
	// RPC.
	ListingServiceGetListingProcedure = "/reusehub.listing.v1.ListingService/GetListing"
	// ListingServiceCreateListingProcedure is the fully-qualified name of the ListingService's
	// CreateListing RPC.
	ListingServiceCreateListingProcedure = "/reusehub.listing.v1.ListingService/CreateListing"
	// ListingServiceSearchListingsProcedure is the fully-qualified name of the ListingService's
	// SearchListings RPC.
	ListingServiceSearchListingsProcedure = "/reusehub.listing.v1.ListingService/SearchListings"
)

// ListingServiceClient is a client for the reusehub.listing.v1.ListingService service.
type ListingServiceClient interface {
	// GetListing retrieves a listing by ID
	GetListing(context.Context, *connect_go.Request[v1.GetListingRequest]) (*connect_go.Response[v1.GetListingResponse], error)
	// CreateListing creates a new listing
	CreateListing(context.Context, *connect_go.Request[v1.CreateListingRequest]) (*connect_go.Response[v1.CreateListingResponse], error)
	// SearchListings searches for listings with filters
	SearchListings(context.Context, *connect_go.Request[v1.SearchListingsRequest]) (*connect_go.Response[v1.SearchListingsResponse], error)
}

// NewListingServiceClient constructs a client for the reusehub.listing.v1.ListingService service.
// By default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped
// responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewListingServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) ListingServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &listingServiceClient{
		getListing: connect_go.NewClient[v1.GetListingRequest, v1.GetListingResponse](
			httpClient,
			baseURL+ListingServiceGetListingProcedure,
			opts...,
		),
		createListing: connect_go.NewClient[v1.CreateListingRequest, v1.CreateListingResponse](
			httpClient,
			baseURL+ListingServiceCreateListingProcedure,
			opts...,
		),
		searchListings: connect_go.NewClient[v1.SearchListingsRequest, v1.SearchListingsResponse](
			httpClient,
			baseURL+ListingServiceSearchListingsProcedure,
			opts...,
		),
	}
}

// listingServiceClient implements ListingServiceClient.
type listingServiceClient struct {
	getListing     *connect_go.Client[v1.GetListingRequest, v1.GetListingResponse]
	createListing  *connect_go.Client[v1.CreateListingRequest, v1.CreateListingResponse]
	searchListings *connect_go.Client[v1.SearchListingsRequest, v1.SearchListingsResponse]
}

// GetListing calls reusehub.listing.v1.ListingService.GetListing.
func (c *listingServiceClient) GetListing(ctx context.Context, req *connect_go.Request[v1.GetListingRequest]) (*connect_go.Response[v1.GetListingResponse], error) {
	return c.getListing.CallUnary(ctx, req)
}

// CreateListing calls reusehub.listing.v1.ListingService.CreateListing.
func (c *listingServiceClient) CreateListing(ctx context.Context, req *connect_go.Request[v1.CreateListingRequest]) (*connect_go.Response[v1.CreateListingResponse], error) {
	return c.createListing.CallUnary(ctx, req)
}

// SearchListings calls reusehub.listing.v1.ListingService.SearchListings.
func (c *listingServiceClient) SearchListings(ctx context.Context, req *connect_go.Request[v1.SearchListingsRequest]) (*connect_go.Response[v1.SearchListingsResponse], error) {
	return c.searchListings.CallUnary(ctx, req)
}

// ListingServiceHandler is an implementation of the reusehub.listing.v1.ListingService service.
type ListingServiceHandler interface {
	// GetListing retrieves a listing by ID
	GetListing(context.Context, *connect_go.Request[v1.GetListingRequest]) (*connect_go.Response[v1.GetListingResponse], error)
	// CreateListing creates a new listing
	CreateListing(context.Context, *connect_go.Request[v1.CreateListingRequest]) (*connect_go.Response[v1.CreateListingResponse], error)
	// SearchListings searches for listings with filters
	SearchListings(context.Context, *connect_go.Request[v1.SearchListingsRequest]) (*connect_go.Response[v1.SearchListingsResponse], error)
}

// NewListingServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewListingServiceHandler(svc ListingServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	listingServiceGetListingHandler := connect_go.NewUnaryHandler(
		ListingServiceGetListingProcedure,
		svc.GetListing,
		opts...,
	)
	listingServiceCreateListingHandler := connect_go.NewUnaryHandler(
		ListingServiceCreateListingProcedure,
		svc.CreateListing,
		opts...,
	)
	listingServiceSearchListingsHandler := connect_go.NewUnaryHandler(
		ListingServiceSearchListingsProcedure,
		svc.SearchListings,
		opts...,
	)
	return "/reusehub.listing.v1.ListingService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ListingServiceGetListingProcedure:
			listingServiceGetListingHandler.ServeHTTP(w, r)
		case ListingServiceCreateListingProcedure:
			listingServiceCreateListingHandler.ServeHTTP(w, r)
		case ListingServiceSearchListingsProcedure:
			listingServiceSearchListingsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedListingServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedListingServiceHandler struct{}

func (UnimplementedListingServiceHandler) GetListing(context.Context, *connect_go.Request[v1.GetListingRequest]) (*connect_go.Response[v1.GetListingResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("reusehub.listing.v1.ListingService.GetListing is not implemented"))
}

func (UnimplementedListingServiceHandler) CreateListing(context.Context, *connect_go.Request[v1.CreateListingRequest]) (*connect_go.Response[v1.CreateListingResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("reusehub.listing.v1.ListingService.CreateListing is not implemented"))
}

func (UnimplementedListingServiceHandler) SearchListings(context.Context, *connect_go.Request[v1.SearchListingsRequest]) (*connect_go.Response[v1.SearchListingsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("reusehub.listing.v1.ListingService.SearchListings is not implemented"))
}
