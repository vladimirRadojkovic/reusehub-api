/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 5.26.1
 * source: proto/reusehub/listing/v1/listing.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export namespace reusehub.listing.v1 {
    export class Listing extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: string;
            title?: string;
            description?: string;
            price?: number;
            category?: string;
            user_id?: string;
            created_at?: number;
            updated_at?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("title" in data && data.title != undefined) {
                    this.title = data.title;
                }
                if ("description" in data && data.description != undefined) {
                    this.description = data.description;
                }
                if ("price" in data && data.price != undefined) {
                    this.price = data.price;
                }
                if ("category" in data && data.category != undefined) {
                    this.category = data.category;
                }
                if ("user_id" in data && data.user_id != undefined) {
                    this.user_id = data.user_id;
                }
                if ("created_at" in data && data.created_at != undefined) {
                    this.created_at = data.created_at;
                }
                if ("updated_at" in data && data.updated_at != undefined) {
                    this.updated_at = data.updated_at;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get title() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set title(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get description() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set description(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get price() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set price(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get category() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set category(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get user_id() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set user_id(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get created_at() {
            return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
        }
        set created_at(value: number) {
            pb_1.Message.setField(this, 7, value);
        }
        get updated_at() {
            return pb_1.Message.getFieldWithDefault(this, 8, 0) as number;
        }
        set updated_at(value: number) {
            pb_1.Message.setField(this, 8, value);
        }
        static fromObject(data: {
            id?: string;
            title?: string;
            description?: string;
            price?: number;
            category?: string;
            user_id?: string;
            created_at?: number;
            updated_at?: number;
        }): Listing {
            const message = new Listing({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.title != null) {
                message.title = data.title;
            }
            if (data.description != null) {
                message.description = data.description;
            }
            if (data.price != null) {
                message.price = data.price;
            }
            if (data.category != null) {
                message.category = data.category;
            }
            if (data.user_id != null) {
                message.user_id = data.user_id;
            }
            if (data.created_at != null) {
                message.created_at = data.created_at;
            }
            if (data.updated_at != null) {
                message.updated_at = data.updated_at;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
                title?: string;
                description?: string;
                price?: number;
                category?: string;
                user_id?: string;
                created_at?: number;
                updated_at?: number;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.title != null) {
                data.title = this.title;
            }
            if (this.description != null) {
                data.description = this.description;
            }
            if (this.price != null) {
                data.price = this.price;
            }
            if (this.category != null) {
                data.category = this.category;
            }
            if (this.user_id != null) {
                data.user_id = this.user_id;
            }
            if (this.created_at != null) {
                data.created_at = this.created_at;
            }
            if (this.updated_at != null) {
                data.updated_at = this.updated_at;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id.length)
                writer.writeString(1, this.id);
            if (this.title.length)
                writer.writeString(2, this.title);
            if (this.description.length)
                writer.writeString(3, this.description);
            if (this.price != 0)
                writer.writeDouble(4, this.price);
            if (this.category.length)
                writer.writeString(5, this.category);
            if (this.user_id.length)
                writer.writeString(6, this.user_id);
            if (this.created_at != 0)
                writer.writeInt64(7, this.created_at);
            if (this.updated_at != 0)
                writer.writeInt64(8, this.updated_at);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Listing {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Listing();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readString();
                        break;
                    case 2:
                        message.title = reader.readString();
                        break;
                    case 3:
                        message.description = reader.readString();
                        break;
                    case 4:
                        message.price = reader.readDouble();
                        break;
                    case 5:
                        message.category = reader.readString();
                        break;
                    case 6:
                        message.user_id = reader.readString();
                        break;
                    case 7:
                        message.created_at = reader.readInt64();
                        break;
                    case 8:
                        message.updated_at = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Listing {
            return Listing.deserialize(bytes);
        }
    }
    export class GetListingRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            id?: string;
        }): GetListingRequest {
            const message = new GetListingRequest({});
            if (data.id != null) {
                message.id = data.id;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id.length)
                writer.writeString(1, this.id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetListingRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetListingRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetListingRequest {
            return GetListingRequest.deserialize(bytes);
        }
    }
    export class GetListingResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            listing?: Listing;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("listing" in data && data.listing != undefined) {
                    this.listing = data.listing;
                }
            }
        }
        get listing() {
            return pb_1.Message.getWrapperField(this, Listing, 1) as Listing;
        }
        set listing(value: Listing) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_listing() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            listing?: ReturnType<typeof Listing.prototype.toObject>;
        }): GetListingResponse {
            const message = new GetListingResponse({});
            if (data.listing != null) {
                message.listing = Listing.fromObject(data.listing);
            }
            return message;
        }
        toObject() {
            const data: {
                listing?: ReturnType<typeof Listing.prototype.toObject>;
            } = {};
            if (this.listing != null) {
                data.listing = this.listing.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_listing)
                writer.writeMessage(1, this.listing, () => this.listing.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetListingResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetListingResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.listing, () => message.listing = Listing.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetListingResponse {
            return GetListingResponse.deserialize(bytes);
        }
    }
    export class CreateListingRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            title?: string;
            description?: string;
            price?: number;
            category?: string;
            user_id?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("title" in data && data.title != undefined) {
                    this.title = data.title;
                }
                if ("description" in data && data.description != undefined) {
                    this.description = data.description;
                }
                if ("price" in data && data.price != undefined) {
                    this.price = data.price;
                }
                if ("category" in data && data.category != undefined) {
                    this.category = data.category;
                }
                if ("user_id" in data && data.user_id != undefined) {
                    this.user_id = data.user_id;
                }
            }
        }
        get title() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set title(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get description() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set description(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get price() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set price(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get category() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set category(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get user_id() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set user_id(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            title?: string;
            description?: string;
            price?: number;
            category?: string;
            user_id?: string;
        }): CreateListingRequest {
            const message = new CreateListingRequest({});
            if (data.title != null) {
                message.title = data.title;
            }
            if (data.description != null) {
                message.description = data.description;
            }
            if (data.price != null) {
                message.price = data.price;
            }
            if (data.category != null) {
                message.category = data.category;
            }
            if (data.user_id != null) {
                message.user_id = data.user_id;
            }
            return message;
        }
        toObject() {
            const data: {
                title?: string;
                description?: string;
                price?: number;
                category?: string;
                user_id?: string;
            } = {};
            if (this.title != null) {
                data.title = this.title;
            }
            if (this.description != null) {
                data.description = this.description;
            }
            if (this.price != null) {
                data.price = this.price;
            }
            if (this.category != null) {
                data.category = this.category;
            }
            if (this.user_id != null) {
                data.user_id = this.user_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.title.length)
                writer.writeString(1, this.title);
            if (this.description.length)
                writer.writeString(2, this.description);
            if (this.price != 0)
                writer.writeDouble(3, this.price);
            if (this.category.length)
                writer.writeString(4, this.category);
            if (this.user_id.length)
                writer.writeString(5, this.user_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateListingRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateListingRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.title = reader.readString();
                        break;
                    case 2:
                        message.description = reader.readString();
                        break;
                    case 3:
                        message.price = reader.readDouble();
                        break;
                    case 4:
                        message.category = reader.readString();
                        break;
                    case 5:
                        message.user_id = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreateListingRequest {
            return CreateListingRequest.deserialize(bytes);
        }
    }
    export class CreateListingResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            listing?: Listing;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("listing" in data && data.listing != undefined) {
                    this.listing = data.listing;
                }
            }
        }
        get listing() {
            return pb_1.Message.getWrapperField(this, Listing, 1) as Listing;
        }
        set listing(value: Listing) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_listing() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            listing?: ReturnType<typeof Listing.prototype.toObject>;
        }): CreateListingResponse {
            const message = new CreateListingResponse({});
            if (data.listing != null) {
                message.listing = Listing.fromObject(data.listing);
            }
            return message;
        }
        toObject() {
            const data: {
                listing?: ReturnType<typeof Listing.prototype.toObject>;
            } = {};
            if (this.listing != null) {
                data.listing = this.listing.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_listing)
                writer.writeMessage(1, this.listing, () => this.listing.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateListingResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateListingResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.listing, () => message.listing = Listing.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreateListingResponse {
            return CreateListingResponse.deserialize(bytes);
        }
    }
    export class SearchListingsRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            query?: string;
            category?: string;
            min_price?: number;
            max_price?: number;
            page_size?: number;
            page_token?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("query" in data && data.query != undefined) {
                    this.query = data.query;
                }
                if ("category" in data && data.category != undefined) {
                    this.category = data.category;
                }
                if ("min_price" in data && data.min_price != undefined) {
                    this.min_price = data.min_price;
                }
                if ("max_price" in data && data.max_price != undefined) {
                    this.max_price = data.max_price;
                }
                if ("page_size" in data && data.page_size != undefined) {
                    this.page_size = data.page_size;
                }
                if ("page_token" in data && data.page_token != undefined) {
                    this.page_token = data.page_token;
                }
            }
        }
        get query() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set query(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get category() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set category(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get min_price() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set min_price(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get max_price() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set max_price(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get page_size() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set page_size(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get page_token() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set page_token(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        static fromObject(data: {
            query?: string;
            category?: string;
            min_price?: number;
            max_price?: number;
            page_size?: number;
            page_token?: string;
        }): SearchListingsRequest {
            const message = new SearchListingsRequest({});
            if (data.query != null) {
                message.query = data.query;
            }
            if (data.category != null) {
                message.category = data.category;
            }
            if (data.min_price != null) {
                message.min_price = data.min_price;
            }
            if (data.max_price != null) {
                message.max_price = data.max_price;
            }
            if (data.page_size != null) {
                message.page_size = data.page_size;
            }
            if (data.page_token != null) {
                message.page_token = data.page_token;
            }
            return message;
        }
        toObject() {
            const data: {
                query?: string;
                category?: string;
                min_price?: number;
                max_price?: number;
                page_size?: number;
                page_token?: string;
            } = {};
            if (this.query != null) {
                data.query = this.query;
            }
            if (this.category != null) {
                data.category = this.category;
            }
            if (this.min_price != null) {
                data.min_price = this.min_price;
            }
            if (this.max_price != null) {
                data.max_price = this.max_price;
            }
            if (this.page_size != null) {
                data.page_size = this.page_size;
            }
            if (this.page_token != null) {
                data.page_token = this.page_token;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.query.length)
                writer.writeString(1, this.query);
            if (this.category.length)
                writer.writeString(2, this.category);
            if (this.min_price != 0)
                writer.writeDouble(3, this.min_price);
            if (this.max_price != 0)
                writer.writeDouble(4, this.max_price);
            if (this.page_size != 0)
                writer.writeInt32(5, this.page_size);
            if (this.page_token.length)
                writer.writeString(6, this.page_token);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SearchListingsRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SearchListingsRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.query = reader.readString();
                        break;
                    case 2:
                        message.category = reader.readString();
                        break;
                    case 3:
                        message.min_price = reader.readDouble();
                        break;
                    case 4:
                        message.max_price = reader.readDouble();
                        break;
                    case 5:
                        message.page_size = reader.readInt32();
                        break;
                    case 6:
                        message.page_token = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SearchListingsRequest {
            return SearchListingsRequest.deserialize(bytes);
        }
    }
    export class SearchListingsResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            listings?: Listing[];
            next_page_token?: string;
            total_size?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("listings" in data && data.listings != undefined) {
                    this.listings = data.listings;
                }
                if ("next_page_token" in data && data.next_page_token != undefined) {
                    this.next_page_token = data.next_page_token;
                }
                if ("total_size" in data && data.total_size != undefined) {
                    this.total_size = data.total_size;
                }
            }
        }
        get listings() {
            return pb_1.Message.getRepeatedWrapperField(this, Listing, 1) as Listing[];
        }
        set listings(value: Listing[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        get next_page_token() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set next_page_token(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get total_size() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set total_size(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            listings?: ReturnType<typeof Listing.prototype.toObject>[];
            next_page_token?: string;
            total_size?: number;
        }): SearchListingsResponse {
            const message = new SearchListingsResponse({});
            if (data.listings != null) {
                message.listings = data.listings.map(item => Listing.fromObject(item));
            }
            if (data.next_page_token != null) {
                message.next_page_token = data.next_page_token;
            }
            if (data.total_size != null) {
                message.total_size = data.total_size;
            }
            return message;
        }
        toObject() {
            const data: {
                listings?: ReturnType<typeof Listing.prototype.toObject>[];
                next_page_token?: string;
                total_size?: number;
            } = {};
            if (this.listings != null) {
                data.listings = this.listings.map((item: Listing) => item.toObject());
            }
            if (this.next_page_token != null) {
                data.next_page_token = this.next_page_token;
            }
            if (this.total_size != null) {
                data.total_size = this.total_size;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.listings.length)
                writer.writeRepeatedMessage(1, this.listings, (item: Listing) => item.serialize(writer));
            if (this.next_page_token.length)
                writer.writeString(2, this.next_page_token);
            if (this.total_size != 0)
                writer.writeInt32(3, this.total_size);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SearchListingsResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SearchListingsResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.listings, () => pb_1.Message.addToRepeatedWrapperField(message, 1, Listing.deserialize(reader), Listing));
                        break;
                    case 2:
                        message.next_page_token = reader.readString();
                        break;
                    case 3:
                        message.total_size = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SearchListingsResponse {
            return SearchListingsResponse.deserialize(bytes);
        }
    }
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    interface GrpcStreamServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
        (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    }
    interface GrpWritableServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    }
    interface GrpcChunkServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
        (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    }
    interface GrpcPromiseServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
        (message: P, options?: grpc_1.CallOptions): Promise<R>;
    }
    export abstract class UnimplementedListingServiceService {
        static definition = {
            GetListing: {
                path: "/reusehub.listing.v1.ListingService/GetListing",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: GetListingRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GetListingRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: GetListingResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => GetListingResponse.deserialize(new Uint8Array(bytes))
            },
            CreateListing: {
                path: "/reusehub.listing.v1.ListingService/CreateListing",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: CreateListingRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => CreateListingRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: CreateListingResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => CreateListingResponse.deserialize(new Uint8Array(bytes))
            },
            SearchListings: {
                path: "/reusehub.listing.v1.ListingService/SearchListings",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: SearchListingsRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => SearchListingsRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: SearchListingsResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => SearchListingsResponse.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract GetListing(call: grpc_1.ServerUnaryCall<GetListingRequest, GetListingResponse>, callback: grpc_1.sendUnaryData<GetListingResponse>): void;
        abstract CreateListing(call: grpc_1.ServerUnaryCall<CreateListingRequest, CreateListingResponse>, callback: grpc_1.sendUnaryData<CreateListingResponse>): void;
        abstract SearchListings(call: grpc_1.ServerUnaryCall<SearchListingsRequest, SearchListingsResponse>, callback: grpc_1.sendUnaryData<SearchListingsResponse>): void;
    }
    export class ListingServiceClient extends grpc_1.makeGenericClientConstructor(UnimplementedListingServiceService.definition, "ListingService", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        GetListing: GrpcUnaryServiceInterface<GetListingRequest, GetListingResponse> = (message: GetListingRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<GetListingResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<GetListingResponse>, callback?: grpc_1.requestCallback<GetListingResponse>): grpc_1.ClientUnaryCall => {
            return super.GetListing(message, metadata, options, callback);
        };
        CreateListing: GrpcUnaryServiceInterface<CreateListingRequest, CreateListingResponse> = (message: CreateListingRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<CreateListingResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<CreateListingResponse>, callback?: grpc_1.requestCallback<CreateListingResponse>): grpc_1.ClientUnaryCall => {
            return super.CreateListing(message, metadata, options, callback);
        };
        SearchListings: GrpcUnaryServiceInterface<SearchListingsRequest, SearchListingsResponse> = (message: SearchListingsRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<SearchListingsResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<SearchListingsResponse>, callback?: grpc_1.requestCallback<SearchListingsResponse>): grpc_1.ClientUnaryCall => {
            return super.SearchListings(message, metadata, options, callback);
        };
    }
}
